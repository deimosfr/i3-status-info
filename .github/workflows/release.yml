on:
  # Indicates I want to run this workflow on all branches, PR, and tags
  push:
    branches: ["**"]
    tags: ["*"]
  pull_request:
    branches: [ "main" ]

env:
  # Define the rust version to use
  RUST_VERSION: 1.75.0
  # Rust build arguments
  BUILD_ARGS: "--release --all-features"
  # The binary name
  BIN_NAME: "i3-status-info"
  # Docker token required to pull images from DockerHub
  DOCKER_LOGIN: ${{ secrets.DOCKER_LOGIN }}
  DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

jobs:
  build:
    name: Build - ${{ matrix.platform.name }}
    # By default, runs on Ubuntu, otherwise, override with the desired os
    runs-on: ${{ matrix.platform.os || 'ubuntu-22.04' }}
    strategy:
      matrix:
        # Set platforms you want to build your binaries on
        platform:
          # Linux
            # The name is used for pretty print
          - name: Linux x86_64
            # The used Rust target architecture
            target: x86_64-unknown-linux-gnu

    steps:
    - name: Checkout Git repo
      uses: actions/checkout@v3

    # Linux & Windows
    - name: Install rust toolchain
      if: ${{ !contains(matrix.platform.target, 'apple') }}
      uses: actions-rs/toolchain@v1
      with:
        # We setup Rust toolchain and the desired target
        profile: minimal
        toolchain: "${{ env.RUST_VERSION }}"
        override: true
        target: ${{ matrix.platform.target }}
        components: rustfmt, clippy
    - name: Build ${{ matrix.platform.name }} binary
      if: ${{ !contains(matrix.platform.target, 'apple') }}
      uses: actions-rs/cargo@v1
      # We use cross-rs if not running on x86_64 architecture on Linux
      with:
        command: build
        use-cross: ${{ !contains(matrix.platform.target, 'x86_64') }}
        args: ${{ env.BUILD_ARGS }} --target ${{ matrix.platform.target }}
    
    - name: Store artifact
      uses: actions/upload-artifact@v3
      with:
        # Finally, we store the binary as GitHub artifact for later usage
        name: ${{ matrix.platform.target }}-${{ env.BIN_NAME }}
        path: target/${{ matrix.platform.target }}/release/${{ env.BIN_NAME }}${{ contains(matrix.platform.target, 'windows') && '.exe' || '' }}
        retention-days: 1

  release:
    name: Release
    needs: [build]
    # We run the release job only if a tag starts with 'v' letter
    if: startsWith( github.ref, 'refs/tags/v' )
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Git repo
      uses: actions/checkout@v3

    # Download all artifacts
    - uses: actions/download-artifact@v3
      with:
        path: artifacts

    # Goreleaser
    - name: Set up Go
      uses: actions/setup-go@v4
    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        # Run goreleaser and ignore non-committed files (downloaded artifacts)
        args: release --clean --skip=validate
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN_RUST_CROSS }}
